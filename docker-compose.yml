version: '3.8'

services:
  pipeline:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: pipeline_app
    volumes:
      - .:/app
      - pipeline_data:/app/data
      - pipeline_logs:/app/logs
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - DB_HOST=postgres
      - DB_NAME=pipeline
      - DB_USER=postgres
      - DB_PASSWORD=postgres
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - pipeline_network
    ports:
      - "8000:8000"
    command: ["poetry", "run", "pipeline", "run"]
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    container_name: pipeline_postgres
    environment:
      POSTGRES_DB: pipeline
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - pipeline_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: pipeline_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - pipeline_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Jupyter notebook for development and analysis
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: pipeline_jupyter
    volumes:
      - .:/app
      - pipeline_data:/app/data
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=pipeline
    ports:
      - "8888:8888"
    networks:
      - pipeline_network
    command: >
      sh -c "poetry run jupyter lab
             --ip=0.0.0.0
             --port=8888
             --allow-root
             --no-browser
             --notebook-dir=/app"
    profiles:
      - jupyter

  # Monitoring with Prometheus and Grafana
  prometheus:
    image: prom/prometheus:latest
    container_name: pipeline_prometheus
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - pipeline_network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: pipeline_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning:ro
    ports:
      - "3000:3000"
    networks:
      - pipeline_network
    profiles:
      - monitoring

volumes:
  pipeline_data:
    driver: local
  pipeline_logs:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  pipeline_network:
    driver: bridge
